,"ADM1FIPSNA","ADM1SALBNA","ADM1SALBCO","ADM1DHS","ADM1NAME","DHSREGCO"
,"DHSREGNA","SOURCE","URBAN_RURA","LATNUM","LONGNUM","ALT_GPS"
,"ALT_DEM","DATUM","recode","OBJECTID","DHSREGEN")
for(i in 2:length(point_dirs)){
dir=point_dirs[i]
dir_basename=basename(dir)
dhscc=substring(dir_basename,1,2)
recode=substring(dir_basename,5,6)
shp=list.files(dir,pattern="*.shp$",ignore.case = T,full.names=T)
try({
country_points=readOGR(shp)
country_points$recode=recode
proj4string(country_points) <- crs.geo
country_poly=subset(recent_dhs_1,DHSCC==dhscc)
merged_points=over(country_points,country_poly)
country_points$OBJECTID=merged_points$OBJECTID
country_points$DHSREGEN=merged_points$DHSREGEN
message(dhscc,recode,": ",sum(is.na(country_points$OBJECTID)))
# country_points=subset(country_points,!is.na(OBJECTID))
country_points=country_points[,wanted.names]
pointlist[[i-1]]=country_points
})
}
point.list.complete = pointlist[!sapply(pointlist, is.null)]
options(fill=T)
dhs_points=do.call(rbind,point.list.complete)
save(dhs_points,file="E:/DHS mapping/dhs_points.RData")
CF=subset(recent_dhs_1,DHSCC=="CF")
plot(CF)
CF_points=subset(dhs_points,DHSCC=="CF")
points(CF_points)
?writeOGR
writeOGR(CF,"E:/CF.shp")
writeOGR(CF,"E:/CF",driver="ESRI Shapefile")
writeSpatialShape()
library(maptools)
writeSpatialShape(CF,"E:/CF")
?over
View(country_points@data)
country_buffer_urban=subset(country_points,URBAN_RURA=="U")
o
country_buffer_rural=subset(country_points,URBAN_RURA=="R")
country_buffer_urban=gBuffer(subset(country_points,URBAN_RURA=="U"),width=0.02,byid=T)
plot(country_buffer_urban)
points(country_points)
country_buffers=rbind(country_buffer_rural,country_buffer_urban)
country_buffer_urban=gBuffer(subset(country_points,URBAN_RURA=="U"),width=0.02,byid=T)
country_buffer_rural=gBuffer(subset(country_points,URBAN_RURA=="R"),width=0.05,byid=T)
country_buffers=rbind(country_buffer_rural,country_buffer_urban)
plot(country_buffers)
dhscc
country_points=readOGR(shp)
country_points$recode=recode
proj4string(country_points) <- crs.geo
#0.002 decimal degrees is approx 200 meters near the equator
country_buffer_urban=gBuffer(subset(country_points,URBAN_RURA=="U"),width=0.02,byid=T)
country_buffer_rural=gBuffer(subset(country_points,URBAN_RURA=="R"),width=0.05,byid=T)
country_buffers=rbind(country_buffer_rural,country_buffer_urban)
try({
country_points=readOGR(shp)
country_points$recode=recode
proj4string(country_points) <- crs.geo
#0.002 decimal degrees is approx 200 meters near the equator
country_buffer_urban=gBuffer(subset(country_points,URBAN_RURA=="U"),width=0.02,byid=T)
country_buffer_rural=gBuffer(subset(country_points,URBAN_RURA=="R"),width=0.05,byid=T)
country_buffers=rbind(country_buffer_rural,country_buffer_urban)
country_poly=subset(recent_dhs_1,DHSCC==dhscc)
merged_buffers=over(country_buffers,country_poly)
country_buffers$OBJECTID=merged_buffers$OBJECTID
country_buffers$DHSREGEN=merged_buffers$DHSREGEN
message(dhscc,recode,": ",sum(is.na(country_buffers$OBJECTID)))
# country_buffers=subset(country_buffers,!is.na(OBJECTID))
country_buffers=country_buffers[,wanted.names]
})
View(country_buffers@data)
point_dirs
i=27
dir=point_dirs[i]
dir_basename=basename(dir)
dhscc=substring(dir_basename,1,2)
recode=substring(dir_basename,5,6)
shp=list.files(dir,pattern="*.shp$",ignore.case = T,full.names=T)
country_points=readOGR(shp)
country_points$recode=recode
proj4string(country_points) <- crs.geo
#0.002 decimal degrees is approx 200 meters near the equator
country_buffer_urban=gBuffer(subset(country_points,URBAN_RURA=="U"),width=0.02,byid=T)
country_buffer_rural=gBuffer(subset(country_points,URBAN_RURA=="R"),width=0.05,byid=T)
country_buffers=rbind(country_buffer_rural,country_buffer_urban)
country_poly=subset(recent_dhs_1,DHSCC==dhscc)
merged_buffers=over(country_buffers,country_poly)
country_buffers$OBJECTID=merged_buffers$OBJECTID
country_buffers$DHSREGEN=merged_buffers$DHSREGEN
message(dhscc,recode,": ",sum(is.na(country_buffers$OBJECTID)))
View(country_buffers@data[c("DHSREGNA","DHSREGEN")])
list.of.packages <- c("jsonlite","data.table","sp","rgdal","rgeos","spdep")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
if(.Platform$OS.type == "unix"){
prefix = "~"
}else{
prefix = "E:"
}
wd = paste0(prefix,"/git/p20_spatial_2018")
setwd(wd)
load("project_data/recent_dhs_1.RData")
point_dirs=list.dirs("E:/DHS GPS",full.names=T)
crs.geo <- CRS("+proj=longlat +datum=WGS84")
pointlist=list()
wanted.names=c("DHSID","DHSCC","DHSYEAR","DHSCLUST","CCFIPS","ADM1FIPS"
,"ADM1FIPSNA","ADM1SALBNA","ADM1SALBCO","ADM1DHS","ADM1NAME","DHSREGCO"
,"DHSREGNA","SOURCE","URBAN_RURA","LATNUM","LONGNUM","ALT_GPS"
,"ALT_DEM","DATUM","recode","OBJECTID","DHSREGEN")
for(i in 2:length(point_dirs)){
dir=point_dirs[i]
dir_basename=basename(dir)
dhscc=substring(dir_basename,1,2)
recode=substring(dir_basename,5,6)
shp=list.files(dir,pattern="*.shp$",ignore.case = T,full.names=T)
try({
country_points=readOGR(shp)
country_points$recode=recode
proj4string(country_points) <- crs.geo
#0.002 decimal degrees is approx 200 meters near the equator
country_buffer_urban=gBuffer(subset(country_points,URBAN_RURA=="U"),width=0.02,byid=T)
country_buffer_rural=gBuffer(subset(country_points,URBAN_RURA=="R"),width=0.05,byid=T)
country_buffers=rbind(country_buffer_rural,country_buffer_urban)
country_poly=subset(recent_dhs_1,DHSCC==dhscc)
merged_buffers=over(country_buffers,country_poly)
country_buffers$OBJECTID=merged_buffers$OBJECTID
country_buffers$DHSREGEN=merged_buffers$DHSREGEN
message(dhscc,recode,": ",sum(is.na(country_buffers$OBJECTID)))
# country_buffers=subset(country_buffers,!is.na(OBJECTID))
country_buffers=country_buffers[,wanted.names]
pointlist[[i-1]]=country_buffers
})
}
point.list.complete = pointlist[!sapply(pointlist, is.null)]
options(fill=T)
dhs_points=do.call(rbind,point.list.complete)
save(dhs_points,file="E:/DHS mapping/dhs_points_buffers.RData")
names(dhs_points)
getwd()
write.csv(dhs_points[,c("DHSCC","DHSYEAR","DHSCLUST","OBJECTID","DHSREGEN","DHSREGNA")],"dhspoints.csv",row.names=F,na="")
plot(dhs_points)
country_points=readOGR(shp)
country_points$recode=recode
proj4string(country_points) <- crs.geo
country_poly=subset(recent_dhs_1,DHSCC==dhscc)
merged_points=over(country_points,country_poly)
country_points$OBJECTID=merged_points$OBJECTID
country_points$DHSREGEN=merged_points$DHSREGEN
message(dhscc,recode,": ",sum(is.na(country_points$OBJECTID)))
#
i=142
dir=point_dirs[i]
dir_basename=basename(dir)
dhscc=substring(dir_basename,1,2)
recode=substring(dir_basename,5,6)
shp=list.files(dir,pattern="*.shp$",ignore.case = T,full.names=T)
country_points=readOGR(shp)
country_points$recode=recode
proj4string(country_points) <- crs.geo
country_poly=subset(recent_dhs_1,DHSCC==dhscc)
merged_points=over(country_points,country_poly)
country_points$OBJECTID=merged_points$OBJECTID
country_points$DHSREGEN=merged_points$DHSREGEN
message(dhscc,recode,": ",sum(is.na(country_points$OBJECTID)))
points_dir
point_dirs
i=27
dir=point_dirs[i]
dir_basename=basename(dir)
dhscc=substring(dir_basename,1,2)
recode=substring(dir_basename,5,6)
shp=list.files(dir,pattern="*.shp$",ignore.case = T,full.names=T)
country_points=readOGR(shp)
country_points$recode=recode
proj4string(country_points) <- crs.geo
country_poly=subset(recent_dhs_1,DHSCC==dhscc)
merged_points=over(country_points,country_poly)
country_points$OBJECTID=merged_points$OBJECTID
country_points$DHSREGEN=merged_points$DHSREGEN
message(dhscc,recode,": ",sum(is.na(country_points$OBJECTID)))
missingpoints=subset(country_points,is.na(OBJECTID))
names(country_points)
missingpoints=subset(country_points,is.na(OBJECTID))$DHSCLUST
missingclusters=subset(country_points,is.na(OBJECTID))$DHSCLUST
missingclusters=subset(country_points,is.na(OBJECTID))
j=1
missingclusters=subset(country_points,is.na(OBJECTID))
matchingpolys=list()
missingcluster=missingclusters[j,]
plot(missingcluster)
plot(country_poly)
points(missingcluster)
?gDistance
which.min(gDistance(missingcluster,country_poly,byid=T))
plot(country_poly[4,])
points(missingcluster)
clust=missingcluster$DHSCLUST
matchingpoly=country_poly[which.min(gDistance(missingcluster,country_poly,byid=T)),]
for(j in 1:nrow(missingclusters)){
missingcluster=missingclusters[j,]
clust=missingcluster$DHSCLUST
matchingpoly=country_poly[which.min(gDistance(missingcluster,country_poly,byid=T)),]
country_points$OBJECTID[which(country_points$DHSCLUST==clust)]=matchingpoly$OBJECTID
country_points$DHSREGEN[which(country_points$DHSCLUST==clust)]=matchingpoly$DHSREGEN
}
describe(country_points$OBJECTID)
describe(country_points$DHSREGEN)
View(country_poly@data)
matchingpoly$DHSREGEN=="Region 1" & matchingpoly$DHSCC=="CF"
list.of.packages <- c("jsonlite","data.table","sp","rgdal","rgeos","spdep")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
if(.Platform$OS.type == "unix"){
prefix = "~"
}else{
prefix = "E:"
}
wd = paste0(prefix,"/git/p20_spatial_2018")
setwd(wd)
load("project_data/recent_dhs_1.RData")
point_dirs=list.dirs("E:/DHS GPS",full.names=T)
crs.geo <- CRS("+proj=longlat +datum=WGS84")
pointlist=list()
wanted.names=c("DHSID","DHSCC","DHSYEAR","DHSCLUST","CCFIPS","ADM1FIPS"
,"ADM1FIPSNA","ADM1SALBNA","ADM1SALBCO","ADM1DHS","ADM1NAME","DHSREGCO"
,"DHSREGNA","SOURCE","URBAN_RURA","LATNUM","LONGNUM","ALT_GPS"
,"ALT_DEM","DATUM","recode","OBJECTID","DHSREGEN")
for(i in 2:length(point_dirs)){
dir=point_dirs[i]
dir_basename=basename(dir)
dhscc=substring(dir_basename,1,2)
recode=substring(dir_basename,5,6)
shp=list.files(dir,pattern="*.shp$",ignore.case = T,full.names=T)
try({
country_points=readOGR(shp)
country_points$recode=recode
proj4string(country_points) <- crs.geo
country_poly=subset(recent_dhs_1,DHSCC==dhscc)
merged_points=over(country_points,country_poly)
country_points$OBJECTID=merged_points$OBJECTID
country_points$DHSREGEN=merged_points$DHSREGEN
message(dhscc,recode,": ",sum(is.na(country_points$OBJECTID)))
missingclusters=subset(country_points,is.na(OBJECTID))
for(j in 1:nrow(missingclusters)){
missingcluster=missingclusters[j,]
clust=missingcluster$DHSCLUST
matchingpoly=country_poly[which.min(gDistance(missingcluster,country_poly,byid=T)),]
if(matchingpoly$DHSREGEN=="Region 1" & matchingpoly$DHSCC=="CF"){
country_points$OBJECTID[which(country_points$DHSCLUST==clust)]=363
country_points$DHSREGEN[which(country_points$DHSCLUST==clust)]="Bangui"
}else{
country_points$OBJECTID[which(country_points$DHSCLUST==clust)]=matchingpoly$OBJECTID
country_points$DHSREGEN[which(country_points$DHSCLUST==clust)]=matchingpoly$DHSREGEN
}
}
# country_points=subset(country_points,!is.na(OBJECTID))
country_points=country_points[,wanted.names]
pointlist[[i-1]]=country_points
})
}
list.of.packages <- c("jsonlite","data.table","sp","rgdal","rgeos","spdep")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
if(.Platform$OS.type == "unix"){
prefix = "~"
}else{
prefix = "E:"
}
wd = paste0(prefix,"/git/p20_spatial_2018")
setwd(wd)
load("project_data/recent_dhs_1.RData")
point_dirs=list.dirs("E:/DHS GPS",full.names=T)
crs.geo <- CRS("+proj=longlat +datum=WGS84")
pointlist=list()
wanted.names=c("DHSID","DHSCC","DHSYEAR","DHSCLUST","CCFIPS","ADM1FIPS"
,"ADM1FIPSNA","ADM1SALBNA","ADM1SALBCO","ADM1DHS","ADM1NAME","DHSREGCO"
,"DHSREGNA","SOURCE","URBAN_RURA","LATNUM","LONGNUM","ALT_GPS"
,"ALT_DEM","DATUM","recode","OBJECTID","DHSREGEN")
for(i in 2:length(point_dirs)){
dir=point_dirs[i]
dir_basename=basename(dir)
dhscc=substring(dir_basename,1,2)
recode=substring(dir_basename,5,6)
shp=list.files(dir,pattern="*.shp$",ignore.case = T,full.names=T)
try({
country_points=readOGR(shp)
country_points$recode=recode
proj4string(country_points) <- crs.geo
country_poly=subset(recent_dhs_1,DHSCC==dhscc)
merged_points=over(country_points,country_poly)
country_points$OBJECTID=merged_points$OBJECTID
country_points$DHSREGEN=merged_points$DHSREGEN
message(dhscc,recode,": ",sum(is.na(country_points$OBJECTID)))
missingclusters=subset(country_points,is.na(OBJECTID))
if(nrow(missingclusters)>0){
for(j in 1:nrow(missingclusters)){
missingcluster=missingclusters[j,]
clust=missingcluster$DHSCLUST
matchingpoly=country_poly[which.min(gDistance(missingcluster,country_poly,byid=T)),]
if(matchingpoly$DHSREGEN=="Region 1" & matchingpoly$DHSCC=="CF"){
country_points$OBJECTID[which(country_points$DHSCLUST==clust)]=363
country_points$DHSREGEN[which(country_points$DHSCLUST==clust)]="Bangui"
}else{
country_points$OBJECTID[which(country_points$DHSCLUST==clust)]=matchingpoly$OBJECTID
country_points$DHSREGEN[which(country_points$DHSCLUST==clust)]=matchingpoly$DHSREGEN
}
}
}
# country_points=subset(country_points,!is.na(OBJECTID))
country_points=country_points[,wanted.names]
pointlist[[i-1]]=country_points
})
}
list.of.packages <- c("jsonlite","data.table","sp","rgdal","rgeos","spdep")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
if(.Platform$OS.type == "unix"){
prefix = "~"
}else{
prefix = "E:"
}
wd = paste0(prefix,"/git/p20_spatial_2018")
setwd(wd)
load("project_data/recent_dhs_1.RData")
point_dirs=list.dirs("E:/DHS GPS",full.names=T)
crs.geo <- CRS("+proj=longlat +datum=WGS84")
pointlist=list()
wanted.names=c("DHSID","DHSCC","DHSYEAR","DHSCLUST","CCFIPS","ADM1FIPS"
,"ADM1FIPSNA","ADM1SALBNA","ADM1SALBCO","ADM1DHS","ADM1NAME","DHSREGCO"
,"DHSREGNA","SOURCE","URBAN_RURA","LATNUM","LONGNUM","ALT_GPS"
,"ALT_DEM","DATUM","recode","OBJECTID","DHSREGEN")
for(i in 2:length(point_dirs)){
dir=point_dirs[i]
dir_basename=basename(dir)
dhscc=substring(dir_basename,1,2)
recode=substring(dir_basename,5,6)
shp=list.files(dir,pattern="*.shp$",ignore.case = T,full.names=T)
try({
country_points=readOGR(shp)
country_points$recode=recode
proj4string(country_points) <- crs.geo
country_poly=subset(recent_dhs_1,DHSCC==dhscc)
merged_points=over(country_points,country_poly)
country_points$OBJECTID=merged_points$OBJECTID
country_points$DHSREGEN=merged_points$DHSREGEN
message(dhscc,recode,": ",sum(is.na(country_points$OBJECTID)))
missingclusters=subset(country_points,is.na(OBJECTID))
if(nrow(missingclusters)>0){
for(j in 1:nrow(missingclusters)){
missingcluster=missingclusters[j,]
clust=missingcluster$DHSCLUST
matchingpoly=country_poly[which.min(gDistance(missingcluster,country_poly,byid=T)),]
if(matchingpoly$DHSREGEN=="Region 1" & matchingpoly$DHSCC=="CF"){
country_points$OBJECTID[which(country_points$DHSCLUST==clust)]=363
country_points$DHSREGEN[which(country_points$DHSCLUST==clust)]="Bangui"
}else{
country_points$OBJECTID[which(country_points$DHSCLUST==clust)]=matchingpoly$OBJECTID
country_points$DHSREGEN[which(country_points$DHSCLUST==clust)]=matchingpoly$DHSREGEN
}
}
}
# country_points=subset(country_points,!is.na(OBJECTID))
country_points=country_points[,wanted.names]
pointlist[[i-1]]=country_points
})
}
point.list.complete = pointlist[!sapply(pointlist, is.null)]
options(fill=T)
dhs_points=do.call(rbind,point.list.complete)
save(dhs_points,file="E:/DHS mapping/dhs_points.RData")
write.csv(dhs_points[,c("DHSCC","DHSYEAR","DHSCLUST","OBJECTID","DHSREGEN","DHSREGNA")],"dhspoints.csv",row.names=F,na="")
write.csv(dhs_points[,c("DHSCC","DHSYEAR","DHSCLUST","OBJECTID","DHSREGEN","DHSREGNA")],"dhspoints.csv",row.names=F,na="")
describe(dhs_points$OBJECTID)
plot(country_poly)
plot(recent_dhs_1)
points(dhs_points)
names(dhs_points)
dhs_points$filename=paste0(dhs_points$DHSCC,"HR",dhs_points$recode,"FL")
save(dhs_points,file="E:/DHS mapping/dhs_points.RData")
unique(dhs_points$filename)
write.csv(dhs_points@data[,c("DHSCC","DHSYEAR","DHSCLUST","OBJECTID","DHSREGEN","DHSREGNA","filename")],"dhspoints.csv",row.names=F,na="")
write.csv(dhs_points@data[,c("DHSCC","DHSYEAR","DHSCLUST","OBJECTID","DHSREGEN","DHSREGNA","filename")],"project_data/dhspoints.csv",row.names=F,na="")
list.of.packages <- c("data.table","sp","rgdal","rgeos","spdep")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
if(.Platform$OS.type == "unix"){
prefix = "~"
}else{
prefix = "E:"
}
wd = paste0(prefix,"/git/p20_spatial_2018")
setwd(wd)
regions=read.csv("project_data/dhspoints.csv")
regions=data.table(regions)
regions=regions[,min.year:=year,by=.(DHSCC)]
regions=regions[,min.year:=min(year),by=.(DHSCC)]
names(regions)
regions=regions[,min.year:=sapply(DHSYEAR, min),by=.(DHSCC)]
regions
View(regions)
regions.min=regions[which.min(DHSYEAR),,by=.(DHSCC)]
regions.min=regions[which.min(DHSYEAR),by=.(DHSCC)]
regions.min=regions[,.SD[which.min(DHSYEAR)],by=.(DHSCC)]
View(regions.min)
list.of.packages <- c("data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
if(.Platform$OS.type == "unix"){
prefix = "~"
}else{
prefix = "E:"
}
wd = paste0(prefix,"/git/p20_spatial_2018")
setwd(wd)
regions=read.csv("project_data/dhspoints.csv")
regions=data.table(regions)
regions.min=regions[,.SD[which.min(DHSYEAR)],by=.(DHSCC)]
regions.max=regions[,.SD[which.max(DHSYEAR)],by=.(DHSCC)]
View(regions.max)
View(regions.min)
names(regions.min
)
regions.min=data.frame(regions[,.SD[which.min(DHSYEAR)],by=.(DHSCC)])
regions.max=data.frame(regions[,.SD[which.max(DHSYEAR)],by=.(DHSCC)])
regions.min=region.min[c("DHSCC","DHSYEAR","filename")]
regions.min=regions.min[c("DHSCC","DHSYEAR","filename")]
regions.max=unique(regions.max[c("DHSCC","DHSYEAR")])
regions.min=unique(regions.min[c("DHSCC","DHSYEAR","filename")])
regions.max=unique(regions.max[c("DHSCC","DHSYEAR")])
setnames(regions.min,"DHSYEAR","DHSYEAR.min")
setnames(regions.max,"DHSYEAR","DHSYEAR.max")
uniqueregions=join(regions.min,regions.max)
regions.min=unique(regions.min[c("DHSCC","DHSYEAR","filename")])
regions.max=unique(regions.max[c("DHSCC","DHSYEAR")])
setnames(regions.min,"DHSYEAR","DHSYEAR.min")
setnames(regions.max,"DHSYEAR","DHSYEAR.max")
uniqueregions=merge(regions.min,regions.max)
View(uniqueregions)
uniqueregions=subset(uniqueregions, !(DHSYEAR.min==DHSYEAR.max))
regions.min=data.frame(regions[,.SD[which.min(DHSYEAR)],by=.(DHSCC)])
regions.max=data.frame(regions[,.SD[which.max(DHSYEAR)],by=.(DHSCC)])
regions.min=unique(regions.min[c("DHSCC","DHSYEAR","filename")])
regions.max=unique(regions.max[c("DHSCC","DHSYEAR","filename")])
setnames(regions.min,"DHSYEAR","DHSYEAR.min")
setnames(regions.max,"DHSYEAR","DHSYEAR.max")
setnames(regions.min,"filename","filename.min")
setnames(regions.max,"filename","filename.max")
uniqueregions=merge(regions.min,regions.max)
uniqueregions=subset(uniqueregions, !(DHSYEAR.min==DHSYEAR.max))
View(uniqueregions)
regions=regions[which(regions$DHSYEAR>=1999)]
regions.min=data.frame(regions[,.SD[which.min(DHSYEAR)],by=.(DHSCC)])
regions.max=data.frame(regions[,.SD[which.max(DHSYEAR)],by=.(DHSCC)])
regions.min=unique(regions.min[c("DHSCC","DHSYEAR","filename")])
regions.max=unique(regions.max[c("DHSCC","DHSYEAR","filename")])
setnames(regions.min,"DHSYEAR","DHSYEAR.min")
setnames(regions.max,"DHSYEAR","DHSYEAR.max")
setnames(regions.min,"filename","filename.min")
setnames(regions.max,"filename","filename.max")
uniqueregions=merge(regions.min,regions.max)
uniqueregions=subset(uniqueregions, !(DHSYEAR.min==DHSYEAR.max))
regions=read.csv("project_data/dhspoints.csv")
regions=data.table(regions)
# regions=regions[which(regions$DHSYEAR>=1999)]
regions.min=data.frame(regions[,.SD[which.min(DHSYEAR)],by=.(DHSCC)])
regions.max=data.frame(regions[,.SD[which.max(DHSYEAR)],by=.(DHSCC)])
regions.min=unique(regions.min[c("DHSCC","DHSYEAR","filename")])
regions.max=unique(regions.max[c("DHSCC","DHSYEAR","filename")])
setnames(regions.min,"DHSYEAR","DHSYEAR.min")
setnames(regions.max,"DHSYEAR","DHSYEAR.max")
setnames(regions.min,"filename","filename.min")
setnames(regions.max,"filename","filename.max")
uniqueregions=merge(regions.min,regions.max)
uniqueregions=subset(uniqueregions, !(DHSYEAR.min==DHSYEAR.max))
regions=regions[which(regions$DHSYEAR>=1999)]
regions.min=data.frame(regions[,.SD[which.min(DHSYEAR)],by=.(DHSCC)])
regions.max=data.frame(regions[,.SD[which.max(DHSYEAR)],by=.(DHSCC)])
regions.min=unique(regions.min[c("DHSCC","DHSYEAR","filename")])
regions.max=unique(regions.max[c("DHSCC","DHSYEAR","filename")])
setnames(regions.min,"DHSYEAR","DHSYEAR.min")
setnames(regions.max,"DHSYEAR","DHSYEAR.max")
setnames(regions.min,"filename","filename.min")
setnames(regions.max,"filename","filename.max")
uniqueregions=merge(regions.min,regions.max)
uniqueregions=subset(uniqueregions, !(DHSYEAR.min==DHSYEAR.max))
uniqueregions.2=uniqueregions[which(uniqueregions$DHSYEAR.max>=2010)]
uniqueregions.2=uniqueregions[which(uniqueregions$DHSYEAR.max>=2010),]
uniqueregions.2=uniqueregions[which(uniqueregions$DHSYEAR.max>=2013),]
View(uniqueregions.2)
View(uniqueregions)
regions=regions[which(regions$DHSYEAR>=1999)]
regions.min=data.frame(regions[,.SD[which.min(DHSYEAR)],by=.(DHSCC)])
regions.max=data.frame(regions[,.SD[which.max(DHSYEAR)],by=.(DHSCC)])
regions.min=unique(regions.min[c("DHSCC","DHSYEAR","filename")])
regions.max=unique(regions.max[c("DHSCC","DHSYEAR","filename")])
setnames(regions.min,"DHSYEAR","DHSYEAR.min")
setnames(regions.max,"DHSYEAR","DHSYEAR.max")
setnames(regions.min,"filename","filename.min")
setnames(regions.max,"filename","filename.max")
uniqueregions=merge(regions.min,regions.max)
uniqueregions=subset(uniqueregions, !(DHSYEAR.min==DHSYEAR.max))
uniqueregions.2=uniqueregions[which(uniqueregions$DHSYEAR.max>=2010),]
